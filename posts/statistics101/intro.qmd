---
title: "matplotlib demo"
jupyter: python3
author: "Ryo Nakagtami"
date: last-modified
comments:
    utterances:
         repo: RyoNakagami/statistics-for-regression-monkey
         label: discussion
# when you run this file locally, do not forget to run poetry shell
---

For a demonstration of a line plot on a polar axis, see @fig-polar.

## demo code

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

編集



```{python}
import numpy as np
from sklearn.neighbors import KernelDensity
import plotly.express as px
import plotly.graph_objects as go

np.random.seed(111)
x_row = np.array([150, 132, 144, 139, 118, 135, 123, 133, 152, 136])
x = np.random.normal(np.mean(x_row), np.std(x_row), 1000)
step = 10
ticks = np.arange(70, 200, step)
counts, bins = np.histogram(x, bins=ticks)
bins = 0.5 * (bins[:-1] + bins[1:])

# histogram
fig = px.bar(x=bins, y=counts / sum(counts), 
       labels={"x": "blood pressure", "y": "prob"},
       )
fig.update_layout(
    xaxis = dict(
        tickmode = 'array',
        tickvals = ticks + 5,
    )
)

# density
x_dense = np.linspace(70, 200, 1000)
kde = KernelDensity(kernel='gaussian', bandwidth=step/2).fit(x.reshape(-1, 1))
y_dense = np.exp(kde.score_samples(x_dense.reshape(-1, 1)))

fig.add_trace(go.Scatter(x=x_dense, y=y_dense /max(y_dense) * (max(counts)/sum(counts)),
                    mode='lines',
                    name='kde'))

fig.show()


```

一般的に推測の精度はサンプルサイズを n とするときに $1/\sqrt{n}$ のオーダーで精密になる